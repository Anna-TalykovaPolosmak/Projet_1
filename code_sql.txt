### Requêtes SQL utilisées pour le tableau de bord

#### 1. **Requêtes SQL sur les Ventes**:

```sql
CREATE OR REPLACE VIEW Total AS (
    SELECT month(orderDate) AS mois, 
           year(orderDate) AS ans, 
           orderDate, 
           productLine, 
           productName, 
           customerNumber, 
           quantityOrdered, 
           status, 
           priceEach, 
           comments, 
           SUM(quantityOrdered * priceEach) AS CA_Total
    FROM orders, orderdetails, products
    WHERE (orders.orderNumber = orderdetails.orderNumber 
           AND orderdetails.productCode = products.productCode) 
    GROUP BY mois, ans, orderDate, productLine, productName, customerNumber, quantityOrdered, status, priceEach, comments
);
SELECT * FROM Total;


```
```sql
create or replace view Total AS (
                              SELECT month(orderDate) AS mois, year(orderDate) AS ans, orderDate, productLine, productName, customerNumber, quantityOrdered, status, priceEach, comments, SUM(quantityOrdered*priceEach) AS CA_Total
                              FROM orders, orderdetails, products
                              WHERE (orders.orderNumber= orderdetails.orderNumber AND orderdetails.productCode=products.productCode) 
                              Group by mois, ans, orderDate, productLine, productName, customerNumber, quantityOrdered,status, priceEach, comments
                              );
SELECT *
 from Total;
```
```sql
create or replace view vendus_3 AS (
                              SELECT month(orderDate) AS mois, year(orderDate) AS ans, orderDate, productLine, productName, customerNumber, quantityOrdered, status, priceEach, SUM(quantityOrdered*priceEach) AS CA
                              FROM orders, orderdetails, products
                              WHERE (orders.orderNumber= orderdetails.orderNumber AND orderdetails.productCode=products.productCode) AND status = "Shipped" 
                              Group by mois, ans, orderDate, productLine, productName, customerNumber, quantityOrdered, priceEach
                              ); 
SELECT *
 from vendus_3 ;
```
#### 2. **Requêtes SQL sur la Finance**:
```sql
SELECT date_format(orderdate, "%Y-%m-01") as year_month_,
SUM(quantityOrdered * priceEach) AS CA_enregistre,
    SUM(CASE
	WHEN status='Shipped' THEN quantityOrdered * priceEach
	ELSE 0
	END) AS CA_shipped,
	SUM(CASE
	WHEN status!='Shipped' THEN quantityOrdered * priceEach
	ELSE 0
	END) AS CA_non_shipped,
    ROUND((SUM(CASE
        WHEN status != 'Shipped' THEN quantityOrdered * priceEach
        ELSE 0
    END) / SUM(quantityOrdered * priceEach) * 100),2) AS pourcentage
    FROM orderdetails od
    JOIN orders ON orders.orderNumber = od.orderNumber
    GROUP BY year_month_
    ;
```
```sql
SELECT date_format(orderdate, "%Y-%m-01") as year_month_,
     SUM(quantityOrdered) AS qty_commandes_par_annee
    
    FROM orderdetails od
    JOIN orders ON orders.orderNumber = od.orderNumber
    GROUP BY year_month_;
```
```sql
WITH ca_produit AS(
	SELECT productCode,
        SUM(quantityOrdered*priceEach) AS CA_par_produit,
         SUM(quantityOrdered*buyprice) AS cout_par_produit,
        SUM(quantityOrdered) AS quantités_vendues_par_produit
	FROM orderdetails
    join products using(productcode)
	GROUP BY productCode
)
SELECT ca_produit.productCode AS code_produit, productLine,
		productName AS nom_du_produit,
        ca_produit.CA_par_produit,
        ca_produit.quantités_vendues_par_produit,
        ca_produit.CA_par_produit/ca_produit.quantités_vendues_par_produit AS prix_de_vente_moyen_par_produit,
        buyPrice,
        (ca_produit.CA_par_produit/ca_produit.quantités_vendues_par_produit)-buyPrice AS marge_moyenne_par_produit,
    
        
        ROUND(100*(((ca_produit.CA_par_produit/ca_produit.quantités_vendues_par_produit)-buyPrice)/buyPrice),2) AS taux_marge_moyenne,
        MSRP,
        ROUND(MSRP-(ca_produit.CA_par_produit/ca_produit.quantités_vendues_par_produit),2) AS remises,
		ROUND(100*((MSRP-(ca_produit.CA_par_produit/ca_produit.quantités_vendues_par_produit))/MSRP),2) AS taux_remises_MSRP,
        cout_par_produit,
        ca_par_produit - cout_par_produit as benef_par_prod
FROM products as p
JOIN ca_produit ON ca_produit.productCode = p.productCode
GROUP BY ca_produit.productCode,ca_produit.CA_par_produit,p.buyPrice
ORDER BY taux_remises_MSRP DESC;
```
#### 3. **Requêtes SQL sur la logistique**:

```sql
WITH country_employee AS (
	SELECT lastname, firstname,officeCode, jobtitle, city, country, employeeNumber
    FROM employees
    INNER JOIN offices USING (officecode)
),
	ca_2023 AS (
	SELECT customerName, city, country,salesRepEmployeeNumber, sum(quantityOrdered*priceEach) AS ca
	FROM customers
	JOIN orders USING(customerNumber)
	JOIN orderdetails USING(orderNumber)
	GROUP BY  customerName, city, country,salesRepEmployeeNumber
	ORDER BY customerName
)
SELECT country_employee.lastname,
	   country_employee.firstname,
       country_employee.officeCode,
       country_employee.jobtitle,
       country_employee.city,
       country_employee.country,
 ca_2023.ca
FROM country_employee
INNER JOIN ca_2023 ON country_employee.employeeNumber=ca_2023.salesRepEmployeeNumber
ORDER BY ca DESC, country_employee.country;
```
```sql
SELECT orderNumber, orderDate, shippedDate, `status`,  comments, count(`status`)
FROM `orders`
WHERE `status` != 'Shipped'
GROUP BY orderNumber, orderDate, shippedDate, `status`,  comments;
```
```sql
SELECT * from orders;
```
```sql
WITH stock2023 AS (
		SELECT  productName,productline,
				quantityInstock AS stock_act,
                round(quantityinstock * 365 / sum(quantityOrdered)*1.7 ) as ratio_stock,
				sum(CASE
                       when year(orderDate) = 2023 then quantityOrdered
                       else 0
                       end) as total_ordered_each_product2023
		FROM products
		LEFT JOIN orderdetails USING(productcode)
        LEFT JOIN orders USING (orderNumber)
        -- WHERE orderDate BETWEEN '2023-01-01' AND '2024-01-01'
        GROUP BY productName,quantityInstock,productline
      ),
      Inventory_value AS (
	SELECT productName,quantityInstock*buyprice AS value_stock
	FROM products
    )
SELECT
    stock2023.*,
    Inventory_value.value_stock
FROM stock2023
JOIN Inventory_value USING (productName)
```
#### 4. **Requêtes SQL sur le RH**:

```sql
with employees_chiffre_affaire as(
SELECT  concat(e.firstName, ' ', e.lastName) as nom,
        date_format(o.orderDate,"%Y-%m") as dates,
        d.officeCode, d.city, d.country,
		SUM(quantityOrdered*priceEach) AS Chiffre_Affaire,
rank() over(partition by date_format(o.orderDate,"%Y-%m") order by SUM(quantityOrdered*priceEach)) as rank_CA
FROM offices AS d
	JOIN employees AS e ON d.officeCode=e.officeCode
	JOIN customers AS c ON e.employeeNumber=c.salesRepEmployeeNumber
	join orders  AS o ON c.customerNumber=o.customerNumber
	JOIN orderdetails AS ord ON o.orderNumber=ord.orderNumber
where jobtitle like '%rep%'
group by e.firstName, e.lastName, d.officeCode, d.city, d.country, date_format(o.orderDate,"%Y-%m")
),
total_emp_offices as (
select officecode, count(distinct employeenumber) as total_vendeur_par_office from employees
left join offices using(officecode)
where jobtitle like '%rep%'
group by officecode)
select *, count(*) over(partition by dates) as total_vendeur_actif_mois
from employees_chiffre_affaire
join total_emp_offices USING(officecode);
```
```sql
with
customer_info as (
select  c.city, c.country, 'client' as category, SUM(quantityOrdered*priceEach) as chiffre_affaire
from customers as c
	JOIN orders  AS od ON c.customerNumber=od.customerNumber
	JOIN orderdetails AS ord ON od.orderNumber=ord.orderNumber
    group by c.city, c.country, category
),
 offices_info as (
select  o.city , o.country,'offices' as category, SUM(quantityOrdered*priceEach) as chiffre_affaire
from offices as o
	JOIN employees AS e ON o.officeCode=e.officeCode
	JOIN customers AS c ON e.employeeNumber=c.salesRepEmployeeNumber
	JOIN orders  AS od ON c.customerNumber=od.customerNumber
	JOIN orderdetails AS ord ON od.orderNumber=ord.orderNumber
    group by o.city, o.country, category
),
poid_bussness as (
select *
from offices_info
union
select *
from customer_info)
select *
from poid_bussness;
```

---